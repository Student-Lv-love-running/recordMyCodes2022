#include<iostream>
#include<vector>
#include<queue>
#include<unordered_map>
using namespace std;

//通过测试用例：17 / 55
class Solution {
public:

    int Find(int* parents,int a){
        if(parents[a]==a)
            return a;
        parents[a]= Find(parents,parents[a]);
        return parents[a];
    }

    void Union(int* parents,int a,int b){
        parents[Find(parents,b)]=Find(parents,a);
    }

    vector<int> findRedundantDirectedConnection(vector<vector<int>>& edges) {
        int m=edges.size();

        int* parents=new int[m+2];
        for(int i=0;i<m+2;i++)
            parents[i]=i;

        vector<int> ans(2);
        for(int i=0;i<m;++i){
            int a=edges[i][0],b=edges[i][1];
            if(Find(parents,a)!=Find(parents,b))
                Union(parents,a,b);
            else{
                ans[0]=a;
                ans[1]=b;
            }
        }
        return ans;
    }
};

int main() {
    vector<vector<int>> edges;
    int m,n;
    cin>>m>>n;
    for(int i=0;i<m;i++){
        vector<int> tmp;
        for(int j=0;j<n;j++){
            int num;
            cin>>num;
            tmp.emplace_back(num);
        }
        edges.emplace_back(tmp);
    }
    Solution sol;
    vector<int> ans=sol.findRedundantDirectedConnection(edges);
    for(auto& a:ans)
        cout<<a<<" ";
    cout<<endl;
    return 0;
}