#include<iostream>
#include<vector>
#include<queue>
#include<unordered_map>
using namespace std;

//BFS+DFS,完全抄答案的，自己没有解出来
//执行用时：36 ms, 在所有 C++ 提交中击败了72.69%的用户
//内存消耗：19.5 MB，在所有 C++ 提交中击败了30.45%的用户
class Solution {
public:
    int dx[4]={1,-1,0,0};
    int dy[4]={0,0,1,-1};

    //其中一个岛被标记
    void dfs(vector<vector<int>>& grid,int m,int n,int x,int y){
        if(x<0||x>=m||y<0||y>=n||grid[x][y]!=1)
            return;
        grid[x][y]=2;
        dfs(grid,m,n,x+1,y);
        dfs(grid,m,n,x-1,y);
        dfs(grid,m,n,x,y+1);
        dfs(grid,m,n,x,y-1);
    }

    int shortestBridge(vector<vector<int>>& grid) {
        int m=grid.size(),n=grid[0].size();
        int ans=m*n;
        //创建一个m行n列的距离数组
        vector<vector<int>> dist(m,vector<int>(n));

        //flase说明还没找到其中一个岛
        bool flg= false;

        //找到其中一座岛
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]){
                    dfs(grid,m,n,i,j);
                    flg= true;
                    break;
                }
            }
            if(flg)
                break;
        }

        queue<pair<int,int>> que;

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==2){
                    que.emplace(i,j);
                    //同一块岛内距离都是0
                    dist[i][j]=0;
                }
            }
        }

        //搜寻过程有点像波形扩散，每次波及一层，那么被波及的这一层“距离就加1”
        //所以清楚了为什么有“距离数组了吧”
        while(!que.empty()){
            int x=que.front().first,y=que.front().second;
            que.pop();
            for(int i=0;i<4;i++){
                int mx=x+dx[i],my=y+dy[i];
                //越界或被标记过的直接跳过
                if(mx<0||mx>=m||my<0||my>=n||grid[mx][my]==2)
                    continue;
                if(grid[mx][my]==1)
                    return dist[x][y];
                //更新同一层的距离
                dist[mx][my]=dist[x][y]+1;
                //同化新的一层
                grid[mx][my]=2;
                que.emplace(mx,my);
            }
        }
        return ans;
    }
};

int main() {
    vector<vector<int>> grid;
    int m,n;
    cin>>m>>n;
    for(int i=0;i<m;i++){
        vector<int> tmp;
        for(int j=0;j<n;j++){
            int num;
            cin>>num;
            tmp.emplace_back(num);
        }
        grid.emplace_back(tmp);
    }
    Solution sol;
    int ans=sol.shortestBridge(grid);
    cout<<ans<<endl;
    return 0;
}